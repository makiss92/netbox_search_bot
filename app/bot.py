from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram import F
from app.netbox_client import NetBoxClient, escape_markdown
from app.config import settings
import asyncio
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.telegram_bot_token)
dp = Dispatcher()
netbox_client = NetBoxClient()

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
COMMANDS = {
    "/search_racks": "–ü–æ–∏—Å–∫ —Å—Ç–æ–µ–∫",
    "/search_devices": "–ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
    "/search_connections": "–ü–æ–∏—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
    "/search_wireless": "–ü–æ–∏—Å–∫ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
    "/search_ipam": "–ü–æ–∏—Å–∫ IP-–∞–¥—Ä–µ—Å–æ–≤",
    "/search_vpn": "–ü–æ–∏—Å–∫ VPN",
    "/search_virtualization": "–ü–æ–∏—Å–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω",
    "/search_communication_channels": "–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å–≤—è–∑–∏",
    "/search_power_supply": "–ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∏—Ç–∞–Ω–∏—è",
}

async def send_help_message(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
    """
    help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    for command, description in COMMANDS.items():
        help_text += f"{command} - {description}\n"
    await message.reply(help_text)

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ NetBox.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/search_racks <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ —Å—Ç–æ–µ–∫\n"
        "/search_devices <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
        "/search_connections <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n"
        "/search_wireless <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
        "/search_ipam <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ IP-–∞–¥—Ä–µ—Å–æ–≤\n"
        "/search_vpn <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ VPN\n"
        "/search_virtualization <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω\n"
        "/search_communication_channels <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å–≤—è–∑–∏\n"
        "/search_power_supply <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∏—Ç–∞–Ω–∏—è"
    )

@dp.message(F.text.startswith("/search_"))
async def handle_search_command(message: types.Message):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–∏—Å–∫–∞.
    """
    command = message.text.split(" ", 1)[0]
    if command not in COMMANDS:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:")
        await send_help_message(message)
        return

    query = message.text.split(" ", 1)[1] if len(message.text.split(" ", 1)) > 1 else ""
    if not query:
        await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ {COMMANDS[command]}.")
        return

    try:
        endpoint = command.replace("/search_", "").replace("_", "-")
        results = await netbox_client.search(endpoint, query)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç NetBox API: {results}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

        if results is None:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç NetBox API.")
            return

        if results:
            response = f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ {COMMANDS[command]}:\n\n"
            for result in results:
                if endpoint == "devices":
                    response += netbox_client._format_device_details(result) + "\n\n"
                else:
                    response += f"üîπ *{escape_markdown(result.get('name', 'N/A'))}*\n"
                    response += f"  - *–û–ø–∏—Å–∞–Ω–∏–µ*: {escape_markdown(result.get('description', 'N/A'))}\n\n"
        else:
            response = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        await message.reply(response, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ {COMMANDS[command]}: {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ {COMMANDS[command]}.")

@dp.message()
async def handle_unknown_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    """
    await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:")
    await send_help_message(message)

async def start_bot(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.
    """
    try:
        if await netbox_client.check_connection():
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
            await dp.start_polling(bot)
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ NetBox API. –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")