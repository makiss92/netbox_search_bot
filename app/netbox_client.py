import aiohttp
import ssl
import logging
import os
from app.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown.
    """
    escape_chars = "_*[]()~`>#+-=|{}.!"
    return "".join(f"\\{char}" if char in escape_chars else char for char in text)

class NetBoxClient:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å NetBox API.
        """
        self.base_url = settings.netbox_api_url
        self.headers = {
            "Authorization": f"Token {settings.netbox_api_token}",
            "Content-Type": "application/json",
        }
        self.ssl_ca_cert = settings.ssl_ca_cert

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        if not os.path.exists(self.ssl_ca_cert):
            logger.error(f"–§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.ssl_ca_cert}")
            raise FileNotFoundError(f"–§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.ssl_ca_cert}")

    async def _fetch_data(self, endpoint: str, query: str = ""):
        try:
            url = f"{self.base_url}{endpoint}/?q={query}" if query else f"{self.base_url}{endpoint}/"
            ssl_context = ssl.create_default_context(cafile=self.ssl_ca_cert)

            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=self.headers, ssl=ssl_context) as response:
                    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP

                    if not response.content:
                        logger.error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç NetBox API.")
                        return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ None

                    data = await response.json()
                    if not data or not isinstance(data, dict):
                        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç NetBox API: {data}")
                        return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ None

                    return data.get('results', [])
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ NetBox API: {e}")
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ None
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ NetBox API: {e}")
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ None

    async def search(self, endpoint: str, query: str):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ NetBox API.
        """
        return await self._fetch_data(endpoint, query)

    async def check_connection(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NetBox API.
        """
        try:
            await self._fetch_data("status")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NetBox API: {e}")
            return False

    def _format_device_details(self, device) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.
        """
        if not isinstance(device, dict):
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."

        details = []

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        details.append(f"üîπ *{escape_markdown(device.get('name', 'N/A'))}*")
        details.append(f"  - *ID*: {escape_markdown(str(device.get('id', 'N/A')))}")
        details.append(f"  - *–°—Ç–∞—Ç—É—Å*: {escape_markdown(device.get('status', {}).get('label', 'N/A'))}")
        details.append(f"  - *–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä*: {escape_markdown(device.get('serial', 'N/A'))}")
        details.append(f"  - *Asset Tag*: {escape_markdown(device.get('asset_tag', 'N/A'))}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        device_type = device.get("device_type")
        if device_type and isinstance(device_type, dict):
            details.append(f"  - *–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞*: {escape_markdown(device_type.get('model', 'N/A'))}")
            manufacturer = device_type.get("manufacturer")
            if manufacturer and isinstance(manufacturer, dict):
                details.append(f"  - *–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å*: {escape_markdown(manufacturer.get('name', 'N/A'))}")

        site = device.get("site")
        if site and isinstance(site, dict):
            details.append(f"  - *–°–∞–π—Ç*: {escape_markdown(site.get('name', 'N/A'))}")

        rack = device.get("rack")
        if rack and isinstance(rack, dict):
            details.append(f"  - *–°—Ç–æ–π–∫–∞*: {escape_markdown(rack.get('name', 'N/A'))}")

        location = device.get("location")
        if location and isinstance(location, dict):
            details.append(f"  - *–õ–æ–∫–∞—Ü–∏—è*: {escape_markdown(location.get('name', 'N/A'))}")

        primary_ip = device.get("primary_ip")
        if primary_ip and isinstance(primary_ip, dict):
            details.append(f"  - *–û—Å–Ω–æ–≤–Ω–æ–π IP*: {escape_markdown(primary_ip.get('address', 'N/A'))}")

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        for key, value in device.items():
            if key not in ["name", "id", "status", "serial", "asset_tag", "device_type", "site", "rack", "location", "primary_ip"]:
                details.append(f"  - *{escape_markdown(key.capitalize())}*: {escape_markdown(str(value))}")

        return "\n".join(details)